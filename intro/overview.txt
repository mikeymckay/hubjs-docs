.. _intro-overview:

==================
hub.js at a glance
==================

hub.js was developed to make it easy to build a modern data model for your app 
that runs identically on the client and the server and effortlessly syncs data 
between them. Hereâ€™s an informal overview of working with hub.js.

.. note::

    The goal of this document is to give you enough technical specifics to
    understand how hub.js works. This isn't intended to be a tutorial or 
    reference -- but we've got both! When you're ready to build a hub.js data 
    model, you can :ref:`start with the tutorial <intro-tutorial01>` or 
    :ref:`dive right into more detailed documentation <topics-index>`.

Design your data model
======================

hub.js data models are written in JavaScript. The :ref:`data-model syntax 
<topics-hub-models>` offers many rich ways of creating your models. Here's a 
quick example::

    Reporter = hub.Record.extend({
        fullName: hub.attr(String)

        articles: hub.toMany('Article', {
            inverse: 'reporter'
        })
    });

    Article = hub.Record.extend({
        pubDate: hub.attr(Date),
        headline: hub.attr(String),
        content: hub.attr(String),

        reporter: hub.toOne('Reporter', {
            inverse: 'articles', isMaster: true
        })
    });

    Newsroom = hub.Hub.extend({
        uti: 'com.example.newsroom'
    });

Load it
=======

Next, create a simple HTML page that loads hub.js and your data model:

.. code-block:: html

    <html>
      <head>
        <title>Use the console, Luke.</title>
        <script type="text/javascript" src="hub.js"></script>
        <script type="text/javascript" src="newsroom.hub.js"></script>
      </head>
      <body></body>
    </html>

Because hub.js has no dependencies, you can easily package hub.js and your data 
model with CommonJS and access them from the console with `node`_:

.. code-block:: bash

    $ node-repl
    ...
    node> var hub = require('hub').hub;
    node> var api = require('newsroom.hub').api;

When you use hub.js simultaneously on the client and the server, you can easily 
sync data between them. Any updates you make to a hub on the server will 
immediately sync to the client (and vice versa), using the hub.js 
:ref:`sync API <topics-sync>`.

.. _node: http://nodejs.org

Enjoy the free API
==================

With that, you've got a rich :ref:`JavaScript API <topics-hub-queries>` to 
access your data::

    // Create a new, empty hub.
    >>> var newsroom = Newsroom.create();
    
    // No reporters are in the hub yet.
    >>> newsroom.find(Reporter).get('length');
    0

    // Insert a new Reporter.
    >>> var r = newsroom.insert(Reporter, { fullName: "John Smith" });

    // Autocommit is on by default in hub.js so the new reporter has already 
    // been saved into the hub.
    >>> newsroom.find(Reporter).get('length');
    1

    // Properties are accessed using key-value coding on the record object.
    >>> r.get('fullName');
    "John Smith"

    // hub.js provides a rich query API.
    >>> var q = hub.Query.create({
    ...     recordType: Reporter,
    ...     conditions: 'fullName CONTAINS "mith"'
    ... });
    >>> newsroom.find(q).get('length');
    1

    // Insert an article.
    >>> var a = newsroom.insert(Article, {
    ...     pubDate: new Date(),
    ...     headline: "hub.js is cool",
    ...     content: "Yeah.",
    ...     reporter: r
    ... });

    // The new article is saved into the hub automatically.
    >>> newsroom.find(Article).get('length');
    1

    // Article objects get API access to related Reporter objects.
    >>> r = a.getPath('reporter.fullName');
    "John Smith"

    // And vice versa: Reporter objects get API access to Article objects.
    >>> r.getPath('articles.length');
    1

    // Change an object by altering its attributes using key-value coding.
    >>> r.set('fullName', "Billy Goat");

    // Remove an object with destroy().
    >>> newsroom.destroy(r);

A dynamic HTML 5 admin interface (coming soon!)
================================================

Once your models are defined, hub.js can automatically create a professional,
production-ready :ref:`administrative interface <ref-contrib-admin>` -- an 
offline-capable, sync-ready, HTML 5 web app that lets users add, change and 
delete records and is compatible with the `hub.js reference AppEngine app`_. 
It's as easy as loading the admin JavaScript and CSS in a web page:

.. code-block:: html

    <html>
      <head>
        <title>Newsroom Admin</title>
        <style type="text/css" media="screen" src="hub-admin.css"></style>
        <script type="text/javascript" src="hub.js"></script>
        <script type="text/javascript" src="hub-admin.js"></script>
        <script type="text/javascript" src="newsroom.hub.js"></script>
      </head>
      <body id="hub-admin">
        <script type="text/javascript">
          var newsroom = Newsroom.create();
          hub.Admin.attach('hub-admin', newsroom);
        </script>
      </body>
    </html>

The philosophy here is to give developers an easy way for users to create, 
update and delete objects in your data model quickly, without having to deal 
with creating a custom HTML 5 web app.

One typical workflow in using hub.js is to create the data model quickly and 
get the admin app up and running as fast as possible, so that staff (or 
clients) can start populating hubs with data. Then, develop the way data is 
presented to the public, either in other apps that load hub.js, or by using the 
hub.js :ref:`integration API <topics-integration>` to interact with existing 
server-based Web app stacks like `Django`_ or `Rails`_ by loading hub.js and 
your data model on the server.

.. _Django: http://djangoproject.com
.. _Rails: http://rubyonrails.org/

This is just the surface
========================

This has been only a quick overview of hub.js' functionality. Some other useful
features:

    * A :ref:`sync API <topics-sync>` that integrates easily with `WebSockets`_ 
      to talk to `nodered`_ and other publish-subscribe backends for easy, 
      reliable over-the-air sync.

    * A :ref:`device storage API <topics-device>` that makes it trivial to 
      store hub.js data locally for offline use with libraries like 
      `lawnchair`_.
      
    * A :ref:`remote storage API <topics-remote>` that makes it simple to 
      store and retrieve arbitrary hub.js data from high-performance NoSQL 
      cloud storage like `CouchDB`_ and the `hub.js reference AppEngine app`_.

    * An :ref:`integration API <topics-integration>` that makes it easy to use 
      hub.js with existing applications on Windows, Mac OS X, iPhone/iPad,
      Java, and more.

    * More sexy admin features -- this overview barely scratched the surface.

The next obvious steps are for you to `download hub.js`_, read :ref:`the
tutorial <intro-tutorial01>`, and join `the community`_. Thanks for your
interest!

.. _WebSockets: http://dev.w3.org/html5/websockets/
.. _nodered: http://github.com/fictorial/nodered
.. _lawnchair: http://github.com/brianleroux/lawnchair
.. _CouchDB: http://couchdb.apache.org/
.. _hub.js reference AppEngine app: http://github.com/hubjs/hubjs-appengine
.. _download hub.js: http://www.hubjs.org/download/
.. _the community: http://www.hubjs.org/community/
